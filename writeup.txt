Title:  Writeup for Project 1, Fall 2015
Date:   09/20/15
Group:	Erika Johnson	erikajoh@usc.edu	
		Heather Persson	hpersson@usc.edu	
		Lorraine Sposto	lsposto@usc.edu	
 
I. Requirements:
- Implement locks and condition variables.
- Simulate the United States Passport Office with the following types of people: Customer, ApplicationClerk, PictureClerk, PassportClerk, Cashier, Manager and Senator.
- In normal operation, the Customer enters the passport office trying to acquire a completed passport. Then, the Customer chooses to visit either the ApplicationClerk or the PictureClerk, and then the other after. The ApplicationClerk accepts a completed Application, consisting of an application and social security number from the Customer. The PictureClerk takes pictures of Customers. Next, the Customer visits the Cashier to pay $100 to receive a passport. Managers tell the various Clerks when to start working and also broadcast the total amount of money that the passport office has at fairly regular intervals of time.
- Customers have a random percentage to not like their picture.
- Once a Customer has paid for their passport by the Cashier, they are done and should leave the passport office.
- Customers randomly decide whether to get their application taken or picture taken first.
- Customers go to the shortest line for the clerk they are visiting.
- Customers start with a randomly determined amount of money in increments of $100, $600, $1100 and $1600, up to a total of $1600.
- Customers can "bribe" any clerk with $500 to move up to the front of the line.
- Clerks have a money amount that goes up when they receive a "bribe".
- Clerks go on break if they have no Customers in their line.
- Customers have some nonzero percentage chance of not liking their picture.
- If a Customer shows up to a PassportClerk before both the application and picture are completed, they must wait a random amount time (from 100-1000 Yield() calls).
- Cashiers only take the $100 passport fee from the Customer if they see a "certification" by the PassportClerk; otherwise the Customer must wait a random amount of time (from 100-1000 Yield() calls).
- Cashiers have a money amount that goes up when they receive a payment.
- Managers must wake up Clerks onb reak when more than 3 Customers get in line.
- Managers must fairly regularly broadcast how much money the passport office has made.
- Senators get to use the passport office by themselves; all Customers not being served must leave the office (and those being served must be served and then leave) when a Senator arrives.
- Customers who were evicted by the Senator's arrival must get back in the same type of line they were in before, after the Senator finishes and leaves.
- Customers who show up while a Senator is being served must wait in an "outside" line.
- No race conditions in the passport office.
- The simulation must work for up to 50 Customers, 1-5 Clerks and Cashier, 1 Manager, and up to 10 Senators.

II. Assumptions:
- The manager knows how many customers are in the passport office at any given time, so when there are no customers left the office can close (i.e. the program terminates).

III. Design:
- Components: Semaphore, Lock, Condition, Customer (incl. Senator), Clerk (incl. App, Pic and Passport), Cashier, Manager.
- Locks and Condition variables (and Semaphore for Senator) will be used to prevent race conditions and ensure mutual exclusion.
- Components will be created and forked into their own threads in the main function, where their "be" function (e.g. beManager, beCustomer, etc.) will be called.
- "Be" functions will start various components in the passport office in continuous execution until they have finished carrying out their roles.
- "Transaction" functions will help execute actions and handle simulated messaging between the various components.

IV. Implementation:
+ Files Modified
- synch.h, synch.cc: lock and condition code.
- threadtest.cc: testing code.
+ Files added
- passport_office.cc: passport simulation code.
+ Data Structures added, and the file they were added to.
- Customer struct (in passport_office.cc): can be REGULAR or SENATOR type. Can have state AVAILABLE, BUSY or BREAK. Has name, SSN, picDone, appDone, certified, gotPassport, money and type. Constructed with name, ssn and type specified.
- Clerk struct (in passport_office.cc): can be APP, PIC or PP type. Has name, index, approved, bribeLineCount, regularLineCount, type, state, regularLineCV, bribeLineCV, transactionCV, transactionLock, breakCV, breakLock, customer and money. Can be constructed with name, index and type specified; otherwise, defaults to no name, -1 index and APP type.
- Cashier struct (in passport_office.cc): can have state AVAILABLE, BUSY or BREAK. Has name, index, approved, lineCount, money, state, lineCV, transactionCV, transactionLock, breakCV, breakLock and customer. Can be constructed with name and index specified; otherwise, defaults to no name and -1 index.
- Manager struct (in passport_office.cc): has name, index and counter. Constructed with name and index specified; counter starts at 0.
- Locks (in passport_office.cc): picLineLock, appLineLock, passportLineLock, cashierLineLock, customerCounterLock, senatorLock. Used to prevent race conditions.
- Senator also has senatorSema and senatorCV in addition to the lock, to ensure mutual exclusion.
- Lines/Arrays (in passport_office.cc): picClerkLines, appClerkLines,passportClerkLines, cashierLines, managers and customers. Used to keep track of the multiple instances of each type.
+ Data Structures modified, and the file they were added to.
- Lock class (in synch.h, synch.cc): implemented constructor, destructor and member functions (see "functions modified" section below).
- Condition class (in synch.h, synch.cc): implemented constructor, destructor and member functions (see "functions modified" section below).
+ Functions added and in which file.
- void broadcastMoney() (in passport_office.cc): called by Manager, to print out ("announce") the subtotals of money each clerk/cashier has and the grand total of money the passport office has.
- void beCustomer(int customerIndex) (in passport_office.cc): starts continuous Customer execution and has Customer go through the steps to obtain a passport, sending mesages to various clerks/cashier as needed along the way.
- void bePicClerk(int clerkIndex) (in passport_office.cc): starts continuous Pic Clerk execution and handles messages from Customer.
- void beAppClerk(int clerkIndex) (in passport_office.cc): starts continuous App Clerk execution and handles messages from Customer.
- void bePassportClerk(int clerkIndex) (in passport_office.cc): starts continuous Passport Clerk execution and handles messages from Customer.
- void beCashier(int cashierIndex) (in passport_office.cc): starts continuous Cashier execution and handles messages from Customer.
- void beManager(int index) (in passport_office.cc): starts continuous Manager execution and handles waking up clerks/cashier when needed. Terminates when there are no more customers in the passport office.
- void picClerkTransaction(int customer, int clerk) (in passport_office.cc): handles messaging between Customer and Pic Clerk.
- void appClerkTransaction(int customer, int clerk) (in passport_office.cc): handles messaging between Customer and App Clerk.
- void passportClerkTransaction(int customer, int clerk) (in passport_office.cc): handles messaging between Customer and Passport Clerk.
- void cashierTransaction(int customer, int cashier) (in passport_office.cc): handles messaging between Customer and Cashier.
- void picAppCustomerProcess(int customerIndex) (in passport_office.cc): executes just the Pic/App part of the Customer's process, for testing.
- void passportCustomerProcess(int customerIndex) (in passport_office.cc): executes just the Passport part of the Customer's process, for testing.
- void cashierCustomerProcess(int customerIndex) (in passport_office.cc): executes just the Cashier part of the Customer's process, for testing.
- void testCase1() (in passport_office.cc): tests that Customers always take the shortest line, but no 2 customers ever choose the same shortest line at the same time (see "testing" section below).
- void testCase2() (in passport_office.cc): tests that Managers only read from one Clerks' total money received at any given time (see "testing" section below).
- void testCase3() (in passport_office.cc): tests that Customers do not leave until they are given their passport by the Cashier, and that the Cashier doesn't start serving another Customer until the last Customer has left (see "testing" section below).
- void testCase4() (in passport_office.cc): tests that Clerks go on break when they have no Customers waiting in their line (see "testing" section below).
- void testCase5() (in passport_office.cc): tests that Managers wake Clerks up from breaks when lines get too long (see "testing" section below).
- void testCase6() (in passport_office.cc): tests that the entire simulation never suffers from a race condition (see "testing" section below).
- void testCase7() (in passport_office.cc): tests that Customers behave properly when Senators arrive (see "testing" section below).
- void testCase8() (in passport_office.cc): tests the entire simulation.
- void PassportOffice() (in passport_office.cc): runs the simulation under normal circumstances.
+ Functions modified and in which file.
- Lock::Lock(char* debugName) (in synch.cc): Lock constructor. Initializes name, state (AVAILABLE), ownerThread (NULL) and queue.
- Lock::~Lock() (in synch.cc): Lock destructor. Deletes queue.
- bool Lock::isHeldByCurrentThread() (in synch.cc): checks if currentThread and ownerThread are the same and returns true or false accordingly.
- void Lock::Acquire() (in synch.cc): acquires the Lock if possible, sets state to BUSY and sets ownerThread to currentThread.
- void Lock::Release() (in synch.cc): releases the Lock if possible, sets state to AVAILABLE and sets ownerThread to NULL.
- Condition::Condition(char* debugName) (in synch.cc): Condition constructor. Initializes name, waitingLock (NULL) and queue.
- Condition::~Condition() (in synch.cc): Condition destructor. Deletes name, waitingLock and queue.
- void Condition::Wait(Lock* conditionLock) (in synch.cc): waits for condition if possible. Disables interrupts, then adds currentThread to queue, releases Lock, puts currentThread to sleep, acquires conditionLock and finally re-enables interrupts.
- void Condition::Signal(Lock* conditionLock) (in synch.cc): signals one thread to wake up, if possible. Disables interrupts, then removes and schedules one thread from the queue, sets waitingLock to NULL and finally re-enables interrupts.
- void Condition::Broadcast(Lock *conditionLock) (in synch.cc): broadcasts to all threads to wake up, if possible. Calls Signal() until queue is empty.

V. Testing:  (For each test case, you must show)
+ How to test
- Run the following command:
- nachos -T
- A menu will print from standard out, from which you can choose one of the test cases.
- Test Case 8 is defined as a custom test case, meaning normal execution of the passport office once given input of Clerk, Cashier, Customer, Senator, and Manager counts.
+ Test Output
- Test Case 1: Customers always take the shortest line, but no 2 customers ever choose the same shortest line at the same time.
- Application Clerk 0 begins with 0 people in line 
- Application Clerk 1 begins with 5 people in line 
- Application Clerk 1 begins with 5 people in line 
- 10 Customers to go to the Application Clerks
- Expected output:
	Customer 0 has gotten in regular line for Application Clerk 0.
	Customer 1 has gotten in regular line for Application Clerk 0.
	Customer 2 has gotten in regular line for Application Clerk 0.
	Customer 3 has gotten in regular line for Application Clerk 0.
	Customer 4 has gotten in regular line for Application Clerk 0.
	Customer 5 has gotten in regular line for Application Clerk 0.
	Customer 6 has gotten in regular line for Application Clerk 1.
	Customer 7 has gotten in regular line for Application Clerk 2.
	Customer 8 has gotten in regular line for Application Clerk 0.
	Customer 9 has gotten in regular line for Application Clerk 1.
- The following proves this case:
- Customers 0-4 (and possibly 5) should choose Application Clerk 0 first because for those customers, the line count will be less than or equal to the line counts of the other Application Clerks.
- Customers 5-9 will choose different lines, even though after Customer 5 the lines could have equal values.
- Given the above output, one can easily prove the test.
- Customer 0 chooses the shortest line, AppClerk 0 out of the set of line counts (0,5,5)
- Customer 1 chooses the shortest line, AppClerk 0 out of the set (1,5,5)
- Customer 2 chooses the shortest line, AppClerk 0 out of the set (2,5,5)
- Customer 3 chooses the shortest line, AppClerk 0 out of the set (3,5,5)
- Customer 4 chooses the shortest line, AppClerk 0 out of the set (4,5,5)
- Customer 5 chooses the shortest line, AppClerk 0 out of the set (5,5,5)
- Customer 6 chooses the shortest line, AppClerk 1 out of the set (6,5,5)
- Customer 7 chooses the shortest line, AppClerk 2 out of the set (6,6,5)
- Customer 8 chooses the shortest line, AppClerk 0 out of the set (6,6,6)
- Customer 9 chooses the shortest line, AppClerk 1 out of the set (7,6,6)

- Test Case 2: Managers only read one from one Clerk's total money received, at a time.
- 1 Picture Clerks
- 1 Application Clerks
- 1 Passport Clerk
- 1 Cashier
- 1 Manager
- In this test, the main thread loops through each clerk of each type to increment their money values by $100, interrupted by occasional and random yields.
- Each time the manager makes an announcement, he reads and stores each value one at a time.
- Expected output:
	Manager 0 has counted amounts of $0 for PictureClerks
	Manager 0 has counted amounts of $0 for ApplicationClerks
	Manager 0 has counted amounts of $0 for PassportClerks
	Manager 0 has counted amounts of $0 for Cashiers
	Manager 0 has counted amounts of $0 for the passport office
	Manager 0 has counted amounts of $200 for PictureClerks
	Manager 0 has counted amounts of $200 for ApplicationClerks
	Manager 0 has counted amounts of $200 for PassportClerks
	Manager 0 has counted amounts of $200 for Cashiers
	Manager 0 has counted amounts of $800 for the passport office
	Manager 0 has counted amounts of $300 for PictureClerks
	Manager 0 has counted amounts of $200 for ApplicationClerks
	Manager 0 has counted amounts of $300 for PassportClerks
	Manager 0 has counted amounts of $300 for Cashiers
	Manager 0 has counted amounts of $1100 for the passport office
	Manager 0 has counted amounts of $400 for PictureClerks
	Manager 0 has counted amounts of $400 for ApplicationClerks
	Manager 0 has counted amounts of $400 for PassportClerks
	Manager 0 has counted amounts of $400 for Cashiers
	Manager 0 has counted amounts of $1600 for the passport office
	Manager 0 has counted amounts of $500 for PictureClerks
	Manager 0 has counted amounts of $500 for ApplicationClerks
	Manager 0 has counted amounts of $500 for PassportClerks
	Manager 0 has counted amounts of $500 for Cashiers
	Manager 0 has counted amounts of $2000 for the passport office

- Test Case 3: Customers do not leave until they are given their passport by the Cashier. The Cashier does not start on another customer until they know that the last Customer has left their area
- 3 Customers, 1 Cashier, and 1 Manager are executed.
- Each customer gets in line for the Cashier, and the Cashier approves each of their passports in order.
- The Customer only leaves the Cashier, and subsequently, the Passport Office, after they have received their passport from the Cashier.
- After a Customer leaves, the Cashier signals another to his desk.
- No Customer arrives at a Cashier before the previous Customer leaves.
- No Customer gets past the Cashier to leave the Office without being approved by the Cashier.
- Expected output:
	Cashier 0 is going on break.
	Customer 0 has gotten in regular line for Cashier 0.
	Customer 1 has gotten in regular line for Cashier 0.
	Customer 2 has gotten in regular line for Cashier 0.
	Manager 0 has counted amounts of $0 for PictureClerks
	Manager 0 has counted amounts of $0 for ApplicationClerks
	Manager 0 has counted amounts of $0 for PassportClerks
	Manager 0 has counted amounts of $0 for Cashiers
	Manager 0 has counted amounts of $0 for the passport office
	Manager 0 has woken up a Cashier
	Cashier 0 has signalled a Customer to come to their counter.
	Cashier 0 has received SSN 0 from Customer 0
	Cashier 0 has verified that Customer 0 has been certified by a PassportClerk
	Customer 0 has given SSN 0 to Cashier 0
	Customer 0 has given Cashier 0 $100.
	Cashier 0 has received the $100 from Customer 0 after certification
	Cashier 0 has provided Customer 0 their completed passport
	Cashier 0 has recorded that Customer 0 has been given their completed passport
	Customer 0 is leaving the Passport Office.
	Cashier 0 has signalled a Customer to come to their counter.
	Cashier 0 has received SSN 1 from Customer 1
	Cashier 0 has verified that Customer 1 has been certified by a PassportClerk
	Customer 1 has given SSN 1 to Cashier 0
	Customer 1 has given Cashier 0 $100.
	Cashier 0 has received the $100 from Customer 1 after certification
	Cashier 0 has provided Customer 1 their completed passport
	Cashier 0 has recorded that Customer 1 has been given their completed passport
	Customer 1 is leaving the Passport Office.
	Cashier 0 has signalled a Customer to come to their counter.
	Cashier 0 has received SSN 2 from Customer 2
	Cashier 0 has verified that Customer 2 has been certified by a PassportClerk
	Customer 2 has given SSN 2 to Cashier 0
	Customer 2 has given Cashier 0 $100.
	Cashier 0 has received the $100 from Customer 2 after certification
	Cashier 0 has provided Customer 2 their completed passport
	Cashier 0 has recorded that Customer 2 has been given their completed passport
	Customer 2 is leaving the Passport Office.
	Cashier 0 is going on break.

- Test Case 4: Clerks go on break when they have no one waiting in their line
- Expected output:
	Passport Clerk 0 is going on break.
	Cashier 0 is going on break.
	Pic Clerk 0 is going on break.
	Application Clerk 0 is going on break.
- In this test, one of each type of clerk/cashier is launched with no customers launched. Since no Customers are present to wait in their lines, each goes on break because there line counts are 0.

- Test Case 5: Managers get Clerks off their break when lines get too long
- 1 Cashier is launched, beginning with line count of 0. The cashier immediately goes on break.
- A loop gradually updates the line count to increment. Once the manager gets his turn in the CPU and sees that the line count is above 3, he wakes the cashier.
- The test holds true for each clerk type as well.
- Expected output:
	Cashier 0 is going on break.
	Manager 0 has counted amounts of $0 for PictureClerks
	Manager 0 has counted amounts of $0 for ApplicationClerks
	Manager 0 has counted amounts of $0 for PassportClerks
	Manager 0 has counted amounts of $0 for Cashiers
	Manager 0 has counted amounts of $0 for the passport office
	Manager 0 has woken up a Cashier
	Cashier 0 has signalled a Customer to come to their counter.


- Test Case 6: Total sales never suffers from a race condition
- In this test, 10 Customers, 3 Managers, and one Cashier are launched. Each Customer goes to the Cashier to complete his passport.
- For each Manager announcement, one can count the amount of money ($100 incremements), exchanged for each transaction that is completed.
- Expected output:
	Cashier 0 is going on break.
	Customer 0 has gotten in regular line for Cashier 0.
	Customer 1 has gotten in regular line for Cashier 0.
	Customer 2 has gotten in regular line for Cashier 0.
	Customer 3 has gotten in regular line for Cashier 0.
	Customer 4 has gotten in regular line for Cashier 0.
	Manager 0 has counted amounts of $0 for PictureClerks
	Manager 0 has counted amounts of $0 for ApplicationClerks
	Manager 0 has counted amounts of $0 for PassportClerks
	Manager 0 has counted amounts of $0 for Cashiers
	Manager 0 has counted amounts of $0 for the passport office
	Manager 0 has woken up a Cashier
	Manager 1 has counted amounts of $0 for PictureClerks
	Manager 1 has counted amounts of $0 for ApplicationClerks
	Manager 1 has counted amounts of $0 for PassportClerks
	Manager 1 has counted amounts of $0 for Cashiers
	Manager 1 has counted amounts of $0 for the passport office
	Manager 2 has counted amounts of $0 for PictureClerks
	Manager 2 has counted amounts of $0 for ApplicationClerks
	Manager 2 has counted amounts of $0 for PassportClerks
	Manager 2 has counted amounts of $0 for Cashiers
	Manager 2 has counted amounts of $0 for the passport office
	Cashier 0 has signalled a Customer to come to their counter.
	Cashier 0 has received SSN 0 from Customer 0
	Cashier 0 has verified that Customer 0 has been certified by a PassportClerk
	Customer 0 has given SSN 0 to Cashier 0
	Customer 0 has given Cashier 0 $100.
	Cashier 0 has received the $100 from Customer 0 after certification
	Cashier 0 has provided Customer 0 their completed passport
	Cashier 0 has recorded that Customer 0 has been given their completed passport
	Customer 0 is leaving the Passport Office.
	Cashier 0 has signalled a Customer to come to their counter.
	Cashier 0 has received SSN 1 from Customer 1
	Cashier 0 has verified that Customer 1 has been certified by a PassportClerk
	Customer 1 has given SSN 1 to Cashier 0
	Customer 1 has given Cashier 0 $100.
	Cashier 0 has received the $100 from Customer 1 after certification
	Cashier 0 has provided Customer 1 their completed passport
	Cashier 0 has recorded that Customer 1 has been given their completed passport
	Customer 1 is leaving the Passport Office.
	Cashier 0 has signalled a Customer to come to their counter.
	Cashier 0 has received SSN 2 from Customer 2
	Cashier 0 has verified that Customer 2 has been certified by a PassportClerk
	Customer 2 has given SSN 2 to Cashier 0
	Customer 2 has given Cashier 0 $100.
	Cashier 0 has received the $100 from Customer 2 after certification
	Cashier 0 has provided Customer 2 their completed passport
	Cashier 0 has recorded that Customer 2 has been given their completed passport
	Customer 2 is leaving the Passport Office.
	Manager 0 has counted amounts of $0 for PictureClerks
	Manager 0 has counted amounts of $0 for ApplicationClerks
	Manager 0 has counted amounts of $0 for PassportClerks
	Manager 0 has counted amounts of $300 for Cashiers
	Manager 0 has counted amounts of $300 for the passport office
	Cashier 0 has signalled a Customer to come to their counter.
	Cashier 0 has received SSN 3 from Customer 3
	Cashier 0 has verified that Customer 3 has been certified by a PassportClerk
	Customer 3 has given SSN 3 to Cashier 0
	Customer 3 has given Cashier 0 $100.
	Cashier 0 has received the $100 from Customer 3 after certification
	Cashier 0 has provided Customer 3 their completed passport
	Cashier 0 has recorded that Customer 3 has been given their completed passport
	Customer 3 is leaving the Passport Office.
	Cashier 0 has signalled a Customer to come to their counter.
	Cashier 0 has received SSN 4 from Customer 4
	Cashier 0 has verified that Customer 4 has been certified by a PassportClerk
	Customer 4 has given SSN 4 to Cashier 0
	Customer 4 has given Cashier 0 $100.
	Cashier 0 has received the $100 from Customer 4 after certification
	Cashier 0 has provided Customer 4 their completed passport
	Cashier 0 has recorded that Customer 4 has been given their completed passport
	Customer 4 is leaving the Passport Office.
	Cashier 0 is going on break.

- Test Case 7: The behavior of Customers is proper when Senators arrive. This is before, during, and after.
- 1 Senator
- 3 Customers
- 1 Cashier
- Customers 0,1,2 leave because the Senator is about to start his passport process. Once he leaves, the Customers return to complete their processes
- This proves the test because all customers stop what they are doing and leave when the Senator arrives, and when they return they pick up at the step where they left off. 

- Expected output:
	Cashier 0 is going on break.
	Senator 0 has gotten in regular line for Cashier 0.
	Customer 1 is going outside the Passport Office because there is a Senator present.
	Customer 2 is going outside the Passport Office because there is a Senator present.
	Customer 3 is going outside the Passport Office because there is a Senator present.
	Manager 0 has counted amounts of $0 for PictureClerks
	Manager 0 has counted amounts of $0 for ApplicationClerks
	Manager 0 has counted amounts of $0 for PassportClerks
	Manager 0 has counted amounts of $0 for Cashiers
	Manager 0 has counted amounts of $0 for the passport office
	Manager 0 has woken up a Cashier
	Cashier 0 has signalled a Customer to come to their counter.
	Cashier 0 has received SSN 0 from Senator 0
	Cashier 0 has verified that Senator 0 has been certified by a PassportClerk
	Senator 0 has given SSN 0 to Cashier 0
	Senator 0 has given Cashier 0 $100.
	Cashier 0 has received the $100 from Senator 0 after certification
	Cashier 0 has provided Senator 0 their completed passport
	Cashier 0 has recorded that Senator 0 has been given their completed passport
	Senator 0 is leaving the Passport Office.
	Cashier 0 is going on break.
	Customer 1 has gotten in regular line for Cashier 0.
	Customer 2 has gotten in regular line for Cashier 0.
	Customer 3 has gotten in regular line for Cashier 0.
	Manager 0 has woken up a Cashier
	Cashier 0 has signalled a Customer to come to their counter.
	Cashier 0 has received SSN 1 from Customer 1
	Cashier 0 has verified that Customer 1 has been certified by a PassportClerk
	Customer 1 has given SSN 1 to Cashier 0
	Customer 1 has given Cashier 0 $100.
	Cashier 0 has received the $100 from Customer 1 after certification
	Cashier 0 has provided Customer 1 their completed passport
	Cashier 0 has recorded that Customer 1 has been given their completed passport
	Customer 1 is leaving the Passport Office.
	Cashier 0 has signalled a Customer to come to their counter.
	Cashier 0 has received SSN 2 from Customer 2
	Cashier 0 has verified that Customer 2 has been certified by a PassportClerk
	Customer 2 has given SSN 2 to Cashier 0
	Customer 2 has given Cashier 0 $100.
	Cashier 0 has received the $100 from Customer 2 after certification
	Cashier 0 has provided Customer 2 their completed passport
	Cashier 0 has recorded that Customer 2 has been given their completed passport
	Customer 2 is leaving the Passport Office.
	Cashier 0 has signalled a Customer to come to their counter.
	Cashier 0 has received SSN 3 from Customer 3
	Cashier 0 has verified that Customer 3 has been certified by a PassportClerk
	Customer 3 has given SSN 3 to Cashier 0
	Customer 3 has given Cashier 0 $100.
	Cashier 0 has received the $100 from Customer 3 after certification
	Cashier 0 has provided Customer 3 their completed passport
	Cashier 0 has recorded that Customer 3 has been given their completed passport
	Customer 3 is leaving the Passport Office.
	Cashier 0 is going on break.

- Describe the testing output. You don't have to dump all the output info. Just make sure your description can exactly reflect your output. The grader of your submission will be wanting to compare the output they get with what you say the output is.

VI. Discussion:
+ Experiment expectation.  (What is supposed to happen.)
+ Experiment result.  (What actually happened.)
+ Explanation
- Explain your experiment result - how it proves what you were supposed to prove.

VIII. Miscellaneous:
- Whatever else you want the grader know about your development.  You can create your own subsections headings here.
